"""
This type stub file was generated by pyright.
"""

from .base import Prism

class FilteringPrism(Prism):
    """A prism that only focuses a value if the predicate returns `True`
    when called with that value as an argument. Best used when composed
    after a traversal. It only prevents the traversal from visiting foci,
    it does not filter out values the way that python's regular `filter`
    function does.

        >>> FilteringPrism(all)
        FilteringPrism(<built-in function all>)
        >>> import lenses
        >>> each = lenses.optics.EachTraversal()
        >>> state = [[1, 2], [0], ['a'], ['', 'b']]
        >>> (each & FilteringPrism(all)).to_list_of(state)
        [[1, 2], ['a']]
        >>> (each & FilteringPrism(all)).set(state, 2)
        [2, [0], 2, ['', 'b']]

    The filtering is done to foci before the lens' manipulation is
    applied. This means that the resulting foci can still violate the
    predicate if the manipulating function doesn't respect it:

        >>> (each & FilteringPrism(bool)).set(['', 2, ''], None)
        ['', None, '']
    """
    def __init__(self, predicate) -> None:
        ...
    
    def unpack(self, state): # -> Just[Unknown] | Nothing[Unknown]:
        ...
    
    def pack(self, focus):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class InstancePrism(FilteringPrism):
    """A prism that focuses a value only when that value is an instance
    of `type_`.

        >>> InstancePrism(int)
        InstancePrism(...)
        >>> InstancePrism(int).to_list_of(1)
        [1]
        >>> InstancePrism(float).to_list_of(1)
        []
        >>> InstancePrism(int).set(1, 2)
        2
        >>> InstancePrism(float).set(1, 2)
        1
    """
    def __init__(self, type_) -> None:
        ...
    
    def predicate(self, value): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class JustPrism(Prism):
    """A prism that focuses the value inside a `lenses.maybe.Just`
    object.

        >>> from lenses.maybe import Just, Nothing
        >>> JustPrism()
        JustPrism()
        >>> JustPrism().to_list_of(Just(1))
        [1]
        >>> JustPrism().to_list_of(Nothing())
        []
        >>> JustPrism().set(Just(1), 2)
        Just(2)
        >>> JustPrism().set(Nothing(), 2)
        Nothing()
    """
    def __init__(self) -> None:
        ...
    
    def unpack(self, a):
        ...
    
    def pack(self, a): # -> Just[Unknown]:
        ...
    
    def __repr__(self): # -> Literal['JustPrism()']:
        ...
    



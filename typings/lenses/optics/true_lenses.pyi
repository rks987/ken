"""
This type stub file was generated by pyright.
"""

from typing import Any
from .base import Lens

class ContainsLens(Lens):
    """A lens that takes an item and focuses a bool based on whether
    the state contains that item. It's most useful when used with
    sets, but it can be used with other collections like lists and
    dictionaries. Analogous to the ``in`` operator.

        >>> ContainsLens(1)
        ContainsLens(1)
        >>> ContainsLens(1).view([2, 3])
        False
        >>> ContainsLens(1).view([1, 2, 3])
        True
        >>> ContainsLens(1).set([1, 2, 3], False)
        [2, 3]
        >>> ContainsLens(1).set([2, 3], True)
        [2, 3, 1]
        >>> ContainsLens(1).set([1, 2, 3], True)
        [1, 2, 3]

    In order to use this lens on custom data-types you must implement
    ``lenses.hooks.contains_add`` and ``lens.hooks.contains_remove``.
    """
    def __init__(self, item) -> None:
        ...
    
    def getter(self, state): # -> bool:
        ...
    
    def setter(self, state, focus): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class GetattrLens(Lens):
    """A lens that focuses an attribute of an object. Analogous to
    `getattr`.

        >>> GetattrLens('left')
        GetattrLens('left')
        >>> from collections import namedtuple
        >>> Pair = namedtuple('Pair', 'left right')
        >>> GetattrLens('left').view(Pair(1, 2))
        1
        >>> GetattrLens('right').set(Pair(1, 2), 3)
        Pair(left=1, right=3)
    """
    def __init__(self, name: str) -> None:
        ...
    
    def getter(self, state): # -> Any:
        ...
    
    def setter(self, state, focus): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class GetitemLens(Lens):
    """A lens that focuses an item inside a container. Analogous to
    `operator.itemgetter`.

        >>> GetitemLens('foo')
        GetitemLens('foo')
        >>> GetitemLens('foo').view({'foo': 1})
        1
        >>> GetitemLens('foo').set({'foo': 1}, 2)
        {'foo': 2}
    """
    def __init__(self, key: Any) -> None:
        ...
    
    def getter(self, state):
        ...
    
    def setter(self, state, focus): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class GetitemOrElseLens(GetitemLens):
    """A lens that focuses an item inside a container by calling its `get`
    method, allowing you to specify a default value for missing keys.
    Analogous to `dict.get`.

        >>> GetitemOrElseLens('foo', 0)
        GetitemOrElseLens('foo', default=0)
        >>> state = {'foo': 1}
        >>> GetitemOrElseLens('foo', 0).view(state)
        1
        >>> GetitemOrElseLens('baz', 0).view(state)
        0
        >>> GetitemOrElseLens('foo', 0).set(state, 2)
        {'foo': 2}
        >>> GetitemOrElseLens('baz', 0).over({}, lambda a: a + 10)
        {'baz': 10}
    """
    def __init__(self, key: Any, default: Any = ...) -> None:
        ...
    
    def getter(self, state):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ItemLens(Lens):
    """A lens that focuses a single item (key-value pair) in a
    dictionary by its key. Set an item to `None` to remove it from the
    dictionary.

        >>> ItemLens(1)
        ItemLens(1)
        >>> from collections import OrderedDict
        >>> state = OrderedDict([(1, 10), (2, 20)])
        >>> ItemLens(1).view(state)
        (1, 10)
        >>> ItemLens(3).view(state) is None
        True
        >>> ItemLens(1).set(state, (1, 11))
        OrderedDict([(1, 11), (2, 20)])
        >>> ItemLens(1).set(state, None)
        OrderedDict([(2, 20)])
    """
    def __init__(self, key: Any) -> None:
        ...
    
    def getter(self, state): # -> tuple[Any, Unknown] | None:
        ...
    
    def setter(self, state, focus):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ItemByValueLens(Lens):
    """A lens that focuses a single item (key-value pair) in a
    dictionary by its value. Set an item to `None` to remove it from the
    dictionary. This lens assumes that there will only be a single key
    with that particular value. If you violate that assumption then
    you're on your own.

        >>> ItemByValueLens(10)
        ItemByValueLens(10)
        >>> from collections import OrderedDict
        >>> state = OrderedDict([(1, 10), (2, 20)])
        >>> ItemByValueLens(10).view(state)
        (1, 10)
        >>> ItemByValueLens(30).view(state) is None
        True
        >>> ItemByValueLens(10).set(state, (3, 10))
        OrderedDict([(2, 20), (3, 10)])
        >>> ItemByValueLens(10).set(state, None)
        OrderedDict([(2, 20)])
    """
    def __init__(self, value) -> None:
        ...
    
    def getter(self, state): # -> tuple[Unknown, Unknown] | None:
        ...
    
    def setter(self, state, focus):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class PartsLens(Lens):
    """An optic that takes the foci of a fold and packs them up together
    as a single list. The kind of this foci depends on what optic you
    give it.
    """
    def __init__(self, optic) -> None:
        ...
    
    def getter(self, state):
        ...
    
    def setter(self, old_state, value):
        ...
    
    def __repr__(self) -> str:
        ...
    
    def kind(self): # -> None:
        ...
    


class TupleLens(Lens):
    """A lens that combines the focuses of other lenses into a single
    tuple. The sublenses must be optics of kind Lens; this means no
    Traversals.

        >>> tl = TupleLens(GetitemLens(0), GetitemLens(2))
        >>> tl
        TupleLens(GetitemLens(0), GetitemLens(2))
        >>> tl.view([1, 2, 3, 4])
        (1, 3)
        >>> tl.set([1, 2, 3, 4], (5, 6))
        [5, 2, 6, 4]

    This lens is particularly useful when immediately followed by
    an EachLens, allowing you to traverse data even when it comes
    from disparate locations within the state.

        >>> import lenses
        >>> each = lenses.optics.EachTraversal()
        >>> tee = tl & each & each
        >>> state = ([1, 2, 3], 4, [5, 6])
        >>> tee.to_list_of(state)
        [1, 2, 3, 5, 6]
    """
    def __init__(self, *lenses) -> None:
        ...
    
    def getter(self, state): # -> tuple[Unknown, ...]:
        ...
    
    def setter(self, state, focus):
        ...
    
    def __repr__(self): # -> str:
        ...
    


